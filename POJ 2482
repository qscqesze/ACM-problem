//qscqesze
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <queue>
#include <typeinfo>
#include <fstream>
#include <map>
#include <stack>
typedef long long ll;
using namespace std;
//freopen("D.in","r",stdin);
//freopen("D.out","w",stdout);
#define sspeed ios_base::sync_with_stdio(0);cin.tie(0)
#define maxn 50000
#define mod 10007
#define eps 1e-9
//const int inf=0x7fffffff;   //无限大
const int inf=0x3f3f3f3f;
/*

int buf[10];
inline void write(int i) {
  int p = 0;if(i == 0) p++;
  else while(i) {buf[p++] = i % 10;i /= 10;}
  for(int j = p-1; j >=0; j--) putchar('0' + buf[j]);
  printf("\n");
}
*/
//**************************************************************************************
inline ll read()
{
    int x=0,f=1;char ch=getchar();
    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}
    return x*f;
}
#define LL(x) (x<<1)
#define RR(x) (x<<1|1)
#define MID(a,b) (a+((b-a)>>1))
const int N=2000005;
typedef long long LL;

struct Line
{
    LL x,y1,y2,valu;
    Line(){}
    Line(LL a,LL b,LL c,LL d)
    { x=a;y1=b;y2=c;valu=d; }
    bool operator<(const Line&b)const
    {
        return x<b.x||(x==b.x&&valu<b.valu);
    }
};
struct node
{
    int lft,rht;
    int flag,mx;
    int mid(){return MID(lft,rht);}
    void fun(int valu)
    {
        mx+=valu;flag+=valu;
    }
};

vector<LL> y;
vector<Line> line;
map<LL,int> H;

struct Segtree
{
    node tree[N*4];
    void build(int lft,int rht,int ind)
    {
        tree[ind].lft=lft;    tree[ind].rht=rht;
        tree[ind].mx=0;        tree[ind].flag=0;
        if(lft+1!=rht)
        {
            int mid=tree[ind].mid();
            build(lft,mid,LL(ind));
            build(mid,rht,RR(ind));
        }
    }
    void updata(int st,int ed,int ind,int valu)
    {
        int lft=tree[ind].lft,rht=tree[ind].rht;
        if(st<=lft&&rht<=ed) tree[ind].fun(valu);
        else 
        {
            if(tree[ind].flag)
            {
                tree[LL(ind)].fun(tree[ind].flag);
                tree[RR(ind)].fun(tree[ind].flag);
                tree[ind].flag=0;
            }
            int mid=tree[ind].mid();
            if(st<mid) updata(st,ed,LL(ind),valu);
            if(ed>mid) updata(st,ed,RR(ind),valu);
            tree[ind].mx=max(tree[LL(ind)].mx,tree[RR(ind)].mx);
        }
    }
}seg;
int main()
{
    int n,w,h;
    while(scanf("%d%d%d",&n,&w,&h)!=EOF)
    {
        y.clear(); H.clear(); line.clear();

        for(int i=0;i<n;i++)
        {
            LL a,b,c;
            scanf("%lld%lld%lld",&a,&b,&c);
            line.push_back(Line(a,b,b+h,c));
            line.push_back(Line(a+w,b,b+h,-c));
            y.push_back(b); y.push_back(b+h); 
        }
        sort(line.begin(),line.end());
        sort(y.begin(),y.end());
        y.erase(unique(y.begin(),y.end()),y.end());
        
        for(int i=0;i<(int)y.size();i++) H[y[i]]=i;

        int mx=0;
        seg.build(0,(int)y.size()-1,1);
        for(int i=0;i<(int)line.size();i++)
        {
            seg.updata(H[line[i].y1],H[line[i].y2],1,line[i].valu);
            mx=max(mx,seg.tree[1].mx);
        }
        printf("%d\n",mx);
    }
    return 0;
}
