//qscqesze
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <queue>
#include <typeinfo>
#include <fstream>
#include <map>
#include <stack>
typedef long long ll;
using namespace std;
//freopen("D.in","r",stdin);
//freopen("D.out","w",stdout);
#define sspeed ios_base::sync_with_stdio(0);cin.tie(0)
#define maxn 200050
#define mod 10007
#define eps 1e-9
int Num;
char CH[20];
//const int inf=0x7fffffff;   //нчоч╢С
const int inf=0x3f3f3f3f;
/*
;
inline void P(int x)
{
    Num=0;if(!x){putchar('0');puts("");return;}
    while(x>0)CH[++Num]=x%10,x/=10;
    while(Num)putchar(CH[Num--]+48);
    puts("");
}
*/
//**************************************************************************************
inline ll read()
{
	int x=0,f=1;char ch=getchar();
	while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
	while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}
	return x*f;
}
inline void P(int x)
{
    Num=0;if(!x){putchar('0');puts("");return;}
    while(x>0)CH[++Num]=x%10,x/=10;
    while(Num)putchar(CH[Num--]+48);
    puts("");
}

struct node
{
    int l,r,v;
};

node a[maxn*4];

void build(int x,int l,int r)
{
    a[x].l=l,a[x].r=r;
    a[x].v=r-l+1;
    if(l==r)
        return;
    int mid=(l+r)>>1;
    build(x<<1,l,mid);
    build(x<<1|1,mid+1,r);
}

int update(int x,int val)
{
    int l=a[x].l,r=a[x].r;
    if(l==r)
    {
        a[x].v=0;
        return l;
    }
    else
    {
        int pos=0;
        if(a[x<<1].v>=val)
            pos=update(x<<1,val);
        else
            pos=update(x<<1|1,val-a[x<<1].v);
        a[x].v=a[x<<1].v+a[x<<1|1].v;
        return pos;
    }
}

int n;
int b[maxn];
int c[maxn];
int pos[maxn];
int main()
{
    while(scanf("%d",&n)!=EOF)
    {
        memset(a,0,sizeof(a));
        build(1,1,n);
        for(int i=0;i<n;i++)
            b[i]=read(),c[i]=read();
        for(int i=n-1;i>=0;i--)
            pos[update(1,b[i]+1)]=c[i];
        for(int i=1;i<=n;i++)
            printf("%d ",pos[i]);
        puts("");
    }
}
